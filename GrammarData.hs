{-# OPTIONS  #-}


-- parser (data) produced by Happy (GLR) Version 1.20.0

module GrammarData where


 
import Tokens
import qualified Data.Array as Happy_Data_Array
import qualified Data.Bits as Bits
import Control.Applicative(Applicative(..))
import Control.Monad (ap)



{-# LINE 1 "templates/GLR_Base.hs" #-}
{- GLR_Base.lhs
   $Id: GLR_Base.lhs,v 1.4 2004/12/04 15:01:37 paulcc Exp $
-}

-- Basic defs required for compiling the data portion of the parser

-- We're creating Int-indexed graphs

type ForestId  = (Int,Int,GSymbol)


-- Actions for the GLR machine

data GLRAction = Shift Int [Reduction]
               | Reduce [Reduction]
               | Accept
               | Error

---
-- A Reduction (s,n,f) removes the top n node-ids, creates a new branch from these
-- and labels the branch with the given symbol s. Additionally, the branch may
-- hold some semantic value.

type Reduction = (GSymbol,Int, [ForestId] -> Branch)


---
-- A Branch holds the semantic result plus node ids of children

data Branch
 = Branch {b_sem :: GSem, b_nodes :: [ForestId]}
   deriving Show

instance Eq Branch where
        b1 == b2 = b_nodes b1 == b_nodes b2



-------------------------------------------------------------------------------
-- Utilities for decoding

---
-- Tree decode unpacks the forest into a list of results
--  - this is ok for small examples, but inefficient for very large examples
--  - the data file contains further instances
--  - see documentation for further information
--  - "Decode_Result" is a synonym used to insert the monad type constr (or not)

class TreeDecode a where
        decode_b :: (ForestId -> [Branch]) -> Branch -> [Decode_Result a]

decode :: TreeDecode a => (ForestId -> [Branch]) -> ForestId -> [Decode_Result a]
decode f i@(_,_,HappyTok t)
  = decode_b f (Branch (SemTok t) [])
decode f i
  = [ d | b <- f i, d <- decode_b f b ]

---- generated by Happy, since it means expansion of synonym (not ok in H-98)
--instance TreeDecode UserDefTok where
--      decode_b f (Branch (SemTok t) []) = [happy_return t]

---
-- this is used to multiply the ambiguous possibilities from children

--cross_fn :: [a -> b] -> [a] -> [b]
--actual type will depend on monad in use.
--happy_ap defined by parser generator
cross_fn fs as = [ f `happy_ap` a | f <- fs, a <- as]

---
-- Label decoding unpacks from the Semantic wrapper type
--  - this allows arbitrary values (within the limits of the compiler settings)
--    to be recovered from nodes in the tree.
--  - again, more instances are written in the data file
--  - see documentation for further information

class LabelDecode a where
        unpack :: GSem -> a

---- generated by Happy, since it means expansion of synonym (not ok in H-98)
--instance LabelDecode UserDefTok where
--      unpack (SemTok t) = t




{-# LINE 103 "GrammarData.hs"#-}

parseError :: [Token] -> a
parseError [] = error "Unknown Parse Error" 
parseError (t:ts) = error ("Parse error at line:column " ++ (tokenPosn t))

-- A program is a sequence of terms. Terms are separated by ';'
data Prog = Term Expr | Terms Expr Prog deriving Show
               
data Expr = UnInit String     -- Uninitialised var declaration
          | Init String Query -- Initialised var declaration
          | Expression Query  -- A query
          deriving Show

data Query = PipeEnd CsvExpr       -- single statement, which returns a CSV 
           | PipeLine CsvExpr Query -- sequence of pipes, separated by "|". Ends with a "PipeEnd"
           deriving Show

-- A CSV Expr is an expression which takes a CSV as input (if any) and returns a new CSV
data CsvExpr = Import String 
             | Asc 
             | Desc 
             | Reform Cols 
             | Print 
             | Select Conds 
             | Update Col Col 
             | VarName String 
             | Write String  
             | If Conds Query 
             | FullBinary (Binary CsvExpr CsvExpr)
             deriving Show


-- Binary operations between two CSVs
data Binary a b = Cross a b  -- Cartessian (Cross) Product
                | Diff a b   -- Difference
                | Union a b  -- Union
                | Inter a b  -- Intersection
                deriving Show


data Col = Index Int | Filler String deriving Show
type Cols = [Col]

data Conds = Single Cond | Neg Conds | And Conds Conds | Or Conds Conds deriving Show
data Cond = ColCond Col Operation Col  | NumCond MathExpr Operation MathExpr | Boolean Bool  deriving Show
data Operation = Equal | NotEqual | Less | More | LessEqual | MoreEqual deriving Show

data MathOperation = Add | Subs | Mul | Div | Mod deriving Show
data MathExpr = Arity Query | Number Int | Calc MathExpr MathOperation MathExpr deriving Show

{-# LINE 154 "GrammarData.hs"#-}

data GSymbol = HappyEOF | HappyTok {-!Int-} (Token) | G_Prog 
 | G_Expr 
 | G_Query 
 | G_CsvExpr 
 | G_Cols 
 | G_Col 
 | G_Conds 
 | G_Cond 
 | G_MathExpr 
 | G_MathOperation 
 | G_Operation 
   deriving (Show,Eq,Ord)

data GSem
 = NoSem
 | SemTok (Token) | Sem_0 (()) 
 | Sem_1 (()) 
 | Sem_2 (()) 
 | Sem_3 (()) 
 | Sem_4 (()) 
 | Sem_5 (()) 
 | Sem_6 (()) 
 | Sem_7 (()) 
 | Sem_8 (()) 
   deriving (Show)


semfn_0_0 ns@(happy_var_1:happy_rest) =  Branch (Sem_0 (Term happy_var_1)) ns
semfn_0_1 ns@(happy_var_1:happy_rest) =  Branch (Sem_0 (Expression happy_var_1)) ns
semfn_0_2 ns@(happy_var_1:happy_rest) =  Branch (Sem_0 (PipeEnd happy_var_1)) ns
semfn_0_3 ns@((_,_,HappyTok ((TokenVar _ happy_var_1))):happy_rest) =  Branch (Sem_0 (VarName happy_var_1)) ns
semfn_0_4 ns@(happy_var_1:happy_rest) =  Branch (Sem_0 ([happy_var_1])) ns
semfn_0_5 ns@((_,_,HappyTok ((TokenString _ happy_var_1))):happy_rest) =  Branch (Sem_0 (Filler happy_var_1)) ns
semfn_0_6 ns@(happy_var_1:happy_rest) =  Branch (Sem_0 (Single happy_var_1)) ns
semfn_0_7 ns@((_,_,HappyTok ((TokenInt _ happy_var_1))):happy_rest) =  Branch (Sem_0 (Number happy_var_1)) ns
semfn_1_0 ns@(happy_var_1:happy_var_2:happy_var_3:happy_rest) =  Branch (Sem_1 (Terms happy_var_1 happy_var_3)) ns
semfn_1_1 ns@(happy_var_1:happy_var_2:happy_var_3:happy_rest) =  Branch (Sem_1 (PipeLine happy_var_1 happy_var_3)) ns
semfn_1_2 ns@(happy_var_1:happy_var_2:happy_var_3:happy_rest) =  Branch (Sem_1 (FullBinary (Cross happy_var_1 happy_var_3))) ns
semfn_1_3 ns@(happy_var_1:happy_var_2:happy_var_3:happy_rest) =  Branch (Sem_1 (FullBinary (Union happy_var_1 happy_var_3))) ns
semfn_1_4 ns@(happy_var_1:happy_var_2:happy_var_3:happy_rest) =  Branch (Sem_1 (FullBinary (Diff happy_var_1 happy_var_3))) ns
semfn_1_5 ns@(happy_var_1:happy_var_2:happy_var_3:happy_rest) =  Branch (Sem_1 (happy_var_1 : happy_var_3)) ns
semfn_1_6 ns@(happy_var_1:happy_var_2:happy_var_3:happy_rest) =  Branch (Sem_1 (And happy_var_1 happy_var_3)) ns
semfn_1_7 ns@(happy_var_1:happy_var_2:happy_var_3:happy_rest) =  Branch (Sem_1 (Or happy_var_1 happy_var_3)) ns
semfn_2_0 ns@(happy_var_1:(_,_,HappyTok ((TokenVar _ happy_var_2))):happy_var_3:happy_var_4:happy_rest) =  Branch (Sem_2 (Init happy_var_2 happy_var_4)) ns
semfn_3_0 ns@(happy_var_1:(_,_,HappyTok ((TokenVar _ happy_var_2))):happy_rest) =  Branch (Sem_3 (UnInit happy_var_2)) ns
semfn_3_1 ns@(happy_var_1:(_,_,HappyTok ((TokenFileName _ happy_var_2))):happy_rest) =  Branch (Sem_3 (Import happy_var_2)) ns
semfn_3_2 ns@(happy_var_1:(_,_,HappyTok ((TokenString _ happy_var_2))):happy_rest) =  Branch (Sem_3 (Write happy_var_2)) ns
semfn_3_3 ns@(happy_var_1:(_,_,HappyTok ((TokenInt _ happy_var_2))):happy_rest) =  Branch (Sem_3 (Index happy_var_2)) ns
semfn_3_4 ns@(happy_var_1:happy_var_2:happy_rest) =  Branch (Sem_3 (Neg happy_var_2)) ns
semfn_3_5 ns@(happy_var_1:happy_var_2:happy_rest) =  Branch (Sem_3 (happy_var_2)) ns
semfn_3_6 ns@(happy_var_1:happy_var_2:happy_rest) =  Branch (Sem_3 (Arity happy_var_2)) ns
semfn_4_0 ns@(happy_rest) =  Branch (Sem_4 (Asc)) ns
semfn_4_1 ns@(happy_rest) =  Branch (Sem_4 (Desc)) ns
semfn_4_2 ns@(happy_rest) =  Branch (Sem_4 (Print)) ns
semfn_4_3 ns@(happy_rest) =  Branch (Sem_4 (Boolean True)) ns
semfn_4_4 ns@(happy_rest) =  Branch (Sem_4 (Boolean False)) ns
semfn_4_5 ns@(happy_rest) =  Branch (Sem_4 (Add)) ns
semfn_4_6 ns@(happy_rest) =  Branch (Sem_4 (Subs)) ns
semfn_4_7 ns@(happy_rest) =  Branch (Sem_4 (Div)) ns
semfn_4_8 ns@(happy_rest) =  Branch (Sem_4 (Mul)) ns
semfn_4_9 ns@(happy_rest) =  Branch (Sem_4 (Mod)) ns
semfn_4_10 ns@(happy_rest) =  Branch (Sem_4 (Equal)) ns
semfn_4_11 ns@(happy_rest) =  Branch (Sem_4 (NotEqual)) ns
semfn_4_12 ns@(happy_rest) =  Branch (Sem_4 (Less)) ns
semfn_4_13 ns@(happy_rest) =  Branch (Sem_4 (More)) ns
semfn_4_14 ns@(happy_rest) =  Branch (Sem_4 (LessEqual)) ns
semfn_4_15 ns@(happy_rest) =  Branch (Sem_4 (MoreEqual)) ns
semfn_5_0 ns@(happy_var_1:happy_var_2:happy_var_3:happy_rest) =  Branch (Sem_5 (Reform happy_var_3)) ns
semfn_5_1 ns@(happy_var_1:happy_var_2:happy_var_3:happy_rest) =  Branch (Sem_5 (Select happy_var_3)) ns
semfn_6_0 ns@(happy_var_1:happy_var_2:happy_var_3:happy_rest) =  Branch (Sem_6 (Update happy_var_2 happy_var_3)) ns
semfn_7_0 ns@(happy_var_1:happy_var_2:happy_var_3:happy_var_4:happy_var_5:happy_var_6:happy_rest) =  Branch (Sem_7 (If happy_var_3 happy_var_6)) ns
semfn_8_0 ns@(happy_var_1:happy_var_2:happy_var_3:happy_rest) =  Branch (Sem_8 (ColCond happy_var_1 happy_var_2 happy_var_3)) ns
semfn_8_1 ns@(happy_var_1:happy_var_2:happy_var_3:happy_rest) =  Branch (Sem_8 (NumCond happy_var_1 happy_var_2 happy_var_3)) ns
semfn_8_2 ns@(happy_var_1:happy_var_2:happy_var_3:happy_rest) =  Branch (Sem_8 (Calc happy_var_1 happy_var_2 happy_var_3)) ns


type Decode_Result a = a
happy_ap = ($)
happy_return = id
instance LabelDecode (()) where 
  unpack (Sem_0 s) = s
  unpack (Sem_1 s) = s
  unpack (Sem_2 s) = s
  unpack (Sem_3 s) = s
  unpack (Sem_4 s) = s
  unpack (Sem_5 s) = s
  unpack (Sem_6 s) = s
  unpack (Sem_7 s) = s
  unpack (Sem_8 s) = s


type UserDefTok = Token
instance TreeDecode (Token) where
  decode_b f (Branch (SemTok t) []) = [happy_return t]
instance LabelDecode (Token) where
  unpack (SemTok t) = t


action 0 ( HappyTok (TokenCSV _) ) = Shift 5 []
action 0 ( HappyTok (TokenImport _) ) = Shift 6 []
action 0 ( HappyTok (TokenPrint _) ) = Shift 7 []
action 0 ( HappyTok (TokenAsc _) ) = Shift 8 []
action 0 ( HappyTok (TokenDesc _) ) = Shift 9 []
action 0 ( HappyTok (TokenSelect _) ) = Shift 10 []
action 0 ( HappyTok (TokenReform _) ) = Shift 11 []
action 0 ( HappyTok (TokenUpdate _) ) = Shift 12 []
action 0 ( HappyTok (TokenWrite _) ) = Shift 13 []
action 0 ( HappyTok (TokenIf _) ) = Shift 14 []
action 0 ( HappyTok (TokenVar _ _) ) = Shift 15 []
action 1 ( HappyTok (TokenCSV _) ) = Shift 5 []
action 1 ( HappyTok (TokenImport _) ) = Shift 6 []
action 1 ( HappyTok (TokenPrint _) ) = Shift 7 []
action 1 ( HappyTok (TokenAsc _) ) = Shift 8 []
action 1 ( HappyTok (TokenDesc _) ) = Shift 9 []
action 1 ( HappyTok (TokenSelect _) ) = Shift 10 []
action 1 ( HappyTok (TokenReform _) ) = Shift 11 []
action 1 ( HappyTok (TokenUpdate _) ) = Shift 12 []
action 1 ( HappyTok (TokenWrite _) ) = Shift 13 []
action 1 ( HappyTok (TokenIf _) ) = Shift 14 []
action 1 ( HappyTok (TokenVar _ _) ) = Shift 15 []
action 2 ( HappyTok (TokenEndLine _) ) = Shift 32 []
action 3 ( HappyTok (TokenEndLine _) ) = Reduce [red_5]
action 4 ( HappyTok (TokenCross _) ) = Shift 28 []
action 4 ( HappyTok (TokenUnion _) ) = Shift 29 []
action 4 ( HappyTok (TokenDiff _) ) = Shift 30 []
action 4 ( HappyTok (TokenRParen _) ) = Reduce [red_6]
action 4 ( HappyTok (TokenRSquare _) ) = Reduce [red_6]
action 4 ( HappyTok (TokenAdd _) ) = Reduce [red_6]
action 4 ( HappyTok (TokenSubs _) ) = Reduce [red_6]
action 4 ( HappyTok (TokenDiv _) ) = Reduce [red_6]
action 4 ( HappyTok (TokenMul _) ) = Reduce [red_6]
action 4 ( HappyTok (TokenMod _) ) = Reduce [red_6]
action 4 ( HappyTok (TokenAnd _) ) = Reduce [red_6]
action 4 ( HappyTok (TokenOr _) ) = Reduce [red_6]
action 4 ( HappyTok (TokenPipe _) ) = Shift 31 []
action 4 ( HappyTok (TokenEndLine _) ) = Reduce [red_6]
action 4 ( HappyTok (TokenNotEq _) ) = Reduce [red_6]
action 4 ( HappyTok (TokenEq _) ) = Reduce [red_6]
action 4 ( HappyTok (TokenLessEq _) ) = Reduce [red_6]
action 4 ( HappyTok (TokenMoreEq _) ) = Reduce [red_6]
action 4 ( HappyTok (TokenLess _) ) = Reduce [red_6]
action 4 ( HappyTok (TokenMore _) ) = Reduce [red_6]
action 5 ( HappyTok (TokenVar _ _) ) = Shift 27 []
action 6 ( HappyTok (TokenFileName _ _) ) = Shift 26 []
action 7 ( HappyTok (TokenCross _) ) = Reduce [red_12]
action 7 ( HappyTok (TokenUnion _) ) = Reduce [red_12]
action 7 ( HappyTok (TokenDiff _) ) = Reduce [red_12]
action 7 ( HappyTok (TokenRParen _) ) = Reduce [red_12]
action 7 ( HappyTok (TokenRSquare _) ) = Reduce [red_12]
action 7 ( HappyTok (TokenAdd _) ) = Reduce [red_12]
action 7 ( HappyTok (TokenSubs _) ) = Reduce [red_12]
action 7 ( HappyTok (TokenDiv _) ) = Reduce [red_12]
action 7 ( HappyTok (TokenMul _) ) = Reduce [red_12]
action 7 ( HappyTok (TokenMod _) ) = Reduce [red_12]
action 7 ( HappyTok (TokenAnd _) ) = Reduce [red_12]
action 7 ( HappyTok (TokenOr _) ) = Reduce [red_12]
action 7 ( HappyTok (TokenPipe _) ) = Reduce [red_12]
action 7 ( HappyTok (TokenEndLine _) ) = Reduce [red_12]
action 7 ( HappyTok (TokenNotEq _) ) = Reduce [red_12]
action 7 ( HappyTok (TokenEq _) ) = Reduce [red_12]
action 7 ( HappyTok (TokenLessEq _) ) = Reduce [red_12]
action 7 ( HappyTok (TokenMoreEq _) ) = Reduce [red_12]
action 7 ( HappyTok (TokenLess _) ) = Reduce [red_12]
action 7 ( HappyTok (TokenMore _) ) = Reduce [red_12]
action 8 ( HappyTok (TokenCross _) ) = Reduce [red_9]
action 8 ( HappyTok (TokenUnion _) ) = Reduce [red_9]
action 8 ( HappyTok (TokenDiff _) ) = Reduce [red_9]
action 8 ( HappyTok (TokenRParen _) ) = Reduce [red_9]
action 8 ( HappyTok (TokenRSquare _) ) = Reduce [red_9]
action 8 ( HappyTok (TokenAdd _) ) = Reduce [red_9]
action 8 ( HappyTok (TokenSubs _) ) = Reduce [red_9]
action 8 ( HappyTok (TokenDiv _) ) = Reduce [red_9]
action 8 ( HappyTok (TokenMul _) ) = Reduce [red_9]
action 8 ( HappyTok (TokenMod _) ) = Reduce [red_9]
action 8 ( HappyTok (TokenAnd _) ) = Reduce [red_9]
action 8 ( HappyTok (TokenOr _) ) = Reduce [red_9]
action 8 ( HappyTok (TokenPipe _) ) = Reduce [red_9]
action 8 ( HappyTok (TokenEndLine _) ) = Reduce [red_9]
action 8 ( HappyTok (TokenNotEq _) ) = Reduce [red_9]
action 8 ( HappyTok (TokenEq _) ) = Reduce [red_9]
action 8 ( HappyTok (TokenLessEq _) ) = Reduce [red_9]
action 8 ( HappyTok (TokenMoreEq _) ) = Reduce [red_9]
action 8 ( HappyTok (TokenLess _) ) = Reduce [red_9]
action 8 ( HappyTok (TokenMore _) ) = Reduce [red_9]
action 9 ( HappyTok (TokenCross _) ) = Reduce [red_10]
action 9 ( HappyTok (TokenUnion _) ) = Reduce [red_10]
action 9 ( HappyTok (TokenDiff _) ) = Reduce [red_10]
action 9 ( HappyTok (TokenRParen _) ) = Reduce [red_10]
action 9 ( HappyTok (TokenRSquare _) ) = Reduce [red_10]
action 9 ( HappyTok (TokenAdd _) ) = Reduce [red_10]
action 9 ( HappyTok (TokenSubs _) ) = Reduce [red_10]
action 9 ( HappyTok (TokenDiv _) ) = Reduce [red_10]
action 9 ( HappyTok (TokenMul _) ) = Reduce [red_10]
action 9 ( HappyTok (TokenMod _) ) = Reduce [red_10]
action 9 ( HappyTok (TokenAnd _) ) = Reduce [red_10]
action 9 ( HappyTok (TokenOr _) ) = Reduce [red_10]
action 9 ( HappyTok (TokenPipe _) ) = Reduce [red_10]
action 9 ( HappyTok (TokenEndLine _) ) = Reduce [red_10]
action 9 ( HappyTok (TokenNotEq _) ) = Reduce [red_10]
action 9 ( HappyTok (TokenEq _) ) = Reduce [red_10]
action 9 ( HappyTok (TokenLessEq _) ) = Reduce [red_10]
action 9 ( HappyTok (TokenMoreEq _) ) = Reduce [red_10]
action 9 ( HappyTok (TokenLess _) ) = Reduce [red_10]
action 9 ( HappyTok (TokenMore _) ) = Reduce [red_10]
action 10 ( HappyTok (TokenLSquare _) ) = Shift 25 []
action 11 ( HappyTok (TokenLSquare _) ) = Shift 24 []
action 12 ( HappyTok (TokenDollar _) ) = Shift 22 []
action 12 ( HappyTok (TokenString _ _) ) = Shift 23 []
action 13 ( HappyTok (TokenString _ _) ) = Shift 20 []
action 14 ( HappyTok (TokenLSquare _) ) = Shift 19 []
action 15 ( HappyTok (TokenCross _) ) = Reduce [red_15]
action 15 ( HappyTok (TokenUnion _) ) = Reduce [red_15]
action 15 ( HappyTok (TokenDiff _) ) = Reduce [red_15]
action 15 ( HappyTok (TokenRParen _) ) = Reduce [red_15]
action 15 ( HappyTok (TokenRSquare _) ) = Reduce [red_15]
action 15 ( HappyTok (TokenAdd _) ) = Reduce [red_15]
action 15 ( HappyTok (TokenSubs _) ) = Reduce [red_15]
action 15 ( HappyTok (TokenDiv _) ) = Reduce [red_15]
action 15 ( HappyTok (TokenMul _) ) = Reduce [red_15]
action 15 ( HappyTok (TokenMod _) ) = Reduce [red_15]
action 15 ( HappyTok (TokenAnd _) ) = Reduce [red_15]
action 15 ( HappyTok (TokenOr _) ) = Reduce [red_15]
action 15 ( HappyTok (TokenPipe _) ) = Reduce [red_15]
action 15 ( HappyTok (TokenEndLine _) ) = Reduce [red_15]
action 15 ( HappyTok (TokenNotEq _) ) = Reduce [red_15]
action 15 ( HappyTok (TokenEq _) ) = Reduce [red_15]
action 15 ( HappyTok (TokenLessEq _) ) = Reduce [red_15]
action 15 ( HappyTok (TokenMoreEq _) ) = Reduce [red_15]
action 15 ( HappyTok (TokenLess _) ) = Reduce [red_15]
action 15 ( HappyTok (TokenMore _) ) = Reduce [red_15]
action 16 ( HappyEOF ) = Accept
action 17 ( HappyTok (TokenEndLine _) ) = Shift 18 []
action 18 ( HappyTok (TokenCSV _) ) = Shift 5 []
action 18 ( HappyTok (TokenImport _) ) = Shift 6 []
action 18 ( HappyTok (TokenPrint _) ) = Shift 7 []
action 18 ( HappyTok (TokenAsc _) ) = Shift 8 []
action 18 ( HappyTok (TokenDesc _) ) = Shift 9 []
action 18 ( HappyTok (TokenSelect _) ) = Shift 10 []
action 18 ( HappyTok (TokenReform _) ) = Shift 11 []
action 18 ( HappyTok (TokenUpdate _) ) = Shift 12 []
action 18 ( HappyTok (TokenWrite _) ) = Shift 13 []
action 18 ( HappyTok (TokenIf _) ) = Shift 14 []
action 18 ( HappyTok (TokenVar _ _) ) = Shift 15 []
action 18 ( HappyEOF ) = Reduce [red_1]
action 19 ( HappyTok (TokenArity _) ) = Shift 42 []
action 19 ( HappyTok (TokenDollar _) ) = Shift 22 []
action 19 ( HappyTok (TokenInt _ _) ) = Shift 43 []
action 19 ( HappyTok (TokenLParen _) ) = Shift 44 []
action 19 ( HappyTok (TokenNeg _) ) = Shift 45 []
action 19 ( HappyTok (TokenTrue _) ) = Shift 46 []
action 19 ( HappyTok (TokenFalse _) ) = Shift 47 []
action 19 ( HappyTok (TokenString _ _) ) = Shift 23 []
action 20 ( HappyTok (TokenCross _) ) = Reduce [red_16]
action 20 ( HappyTok (TokenUnion _) ) = Reduce [red_16]
action 20 ( HappyTok (TokenDiff _) ) = Reduce [red_16]
action 20 ( HappyTok (TokenRParen _) ) = Reduce [red_16]
action 20 ( HappyTok (TokenRSquare _) ) = Reduce [red_16]
action 20 ( HappyTok (TokenAdd _) ) = Reduce [red_16]
action 20 ( HappyTok (TokenSubs _) ) = Reduce [red_16]
action 20 ( HappyTok (TokenDiv _) ) = Reduce [red_16]
action 20 ( HappyTok (TokenMul _) ) = Reduce [red_16]
action 20 ( HappyTok (TokenMod _) ) = Reduce [red_16]
action 20 ( HappyTok (TokenAnd _) ) = Reduce [red_16]
action 20 ( HappyTok (TokenOr _) ) = Reduce [red_16]
action 20 ( HappyTok (TokenPipe _) ) = Reduce [red_16]
action 20 ( HappyTok (TokenEndLine _) ) = Reduce [red_16]
action 20 ( HappyTok (TokenNotEq _) ) = Reduce [red_16]
action 20 ( HappyTok (TokenEq _) ) = Reduce [red_16]
action 20 ( HappyTok (TokenLessEq _) ) = Reduce [red_16]
action 20 ( HappyTok (TokenMoreEq _) ) = Reduce [red_16]
action 20 ( HappyTok (TokenLess _) ) = Reduce [red_16]
action 20 ( HappyTok (TokenMore _) ) = Reduce [red_16]
action 21 ( HappyTok (TokenDollar _) ) = Shift 22 []
action 21 ( HappyTok (TokenString _ _) ) = Shift 23 []
action 22 ( HappyTok (TokenInt _ _) ) = Shift 50 []
action 23 ( HappyTok (TokenDollar _) ) = Reduce [red_24]
action 23 ( HappyTok (TokenCross _) ) = Reduce [red_24]
action 23 ( HappyTok (TokenUnion _) ) = Reduce [red_24]
action 23 ( HappyTok (TokenDiff _) ) = Reduce [red_24]
action 23 ( HappyTok (TokenRParen _) ) = Reduce [red_24]
action 23 ( HappyTok (TokenRSquare _) ) = Reduce [red_24]
action 23 ( HappyTok (TokenAdd _) ) = Reduce [red_24]
action 23 ( HappyTok (TokenSubs _) ) = Reduce [red_24]
action 23 ( HappyTok (TokenDiv _) ) = Reduce [red_24]
action 23 ( HappyTok (TokenMul _) ) = Reduce [red_24]
action 23 ( HappyTok (TokenMod _) ) = Reduce [red_24]
action 23 ( HappyTok (TokenAnd _) ) = Reduce [red_24]
action 23 ( HappyTok (TokenOr _) ) = Reduce [red_24]
action 23 ( HappyTok (TokenComma _) ) = Reduce [red_24]
action 23 ( HappyTok (TokenPipe _) ) = Reduce [red_24]
action 23 ( HappyTok (TokenEndLine _) ) = Reduce [red_24]
action 23 ( HappyTok (TokenNotEq _) ) = Reduce [red_24]
action 23 ( HappyTok (TokenEq _) ) = Reduce [red_24]
action 23 ( HappyTok (TokenLessEq _) ) = Reduce [red_24]
action 23 ( HappyTok (TokenMoreEq _) ) = Reduce [red_24]
action 23 ( HappyTok (TokenLess _) ) = Reduce [red_24]
action 23 ( HappyTok (TokenMore _) ) = Reduce [red_24]
action 23 ( HappyTok (TokenString _ _) ) = Reduce [red_24]
action 24 ( HappyTok (TokenDollar _) ) = Shift 22 []
action 24 ( HappyTok (TokenString _ _) ) = Shift 23 []
action 25 ( HappyTok (TokenArity _) ) = Shift 42 []
action 25 ( HappyTok (TokenDollar _) ) = Shift 22 []
action 25 ( HappyTok (TokenInt _ _) ) = Shift 43 []
action 25 ( HappyTok (TokenLParen _) ) = Shift 44 []
action 25 ( HappyTok (TokenNeg _) ) = Shift 45 []
action 25 ( HappyTok (TokenTrue _) ) = Shift 46 []
action 25 ( HappyTok (TokenFalse _) ) = Shift 47 []
action 25 ( HappyTok (TokenString _ _) ) = Shift 23 []
action 26 ( HappyTok (TokenCross _) ) = Reduce [red_8]
action 26 ( HappyTok (TokenUnion _) ) = Reduce [red_8]
action 26 ( HappyTok (TokenDiff _) ) = Reduce [red_8]
action 26 ( HappyTok (TokenRParen _) ) = Reduce [red_8]
action 26 ( HappyTok (TokenRSquare _) ) = Reduce [red_8]
action 26 ( HappyTok (TokenAdd _) ) = Reduce [red_8]
action 26 ( HappyTok (TokenSubs _) ) = Reduce [red_8]
action 26 ( HappyTok (TokenDiv _) ) = Reduce [red_8]
action 26 ( HappyTok (TokenMul _) ) = Reduce [red_8]
action 26 ( HappyTok (TokenMod _) ) = Reduce [red_8]
action 26 ( HappyTok (TokenAnd _) ) = Reduce [red_8]
action 26 ( HappyTok (TokenOr _) ) = Reduce [red_8]
action 26 ( HappyTok (TokenPipe _) ) = Reduce [red_8]
action 26 ( HappyTok (TokenEndLine _) ) = Reduce [red_8]
action 26 ( HappyTok (TokenNotEq _) ) = Reduce [red_8]
action 26 ( HappyTok (TokenEq _) ) = Reduce [red_8]
action 26 ( HappyTok (TokenLessEq _) ) = Reduce [red_8]
action 26 ( HappyTok (TokenMoreEq _) ) = Reduce [red_8]
action 26 ( HappyTok (TokenLess _) ) = Reduce [red_8]
action 26 ( HappyTok (TokenMore _) ) = Reduce [red_8]
action 27 ( HappyTok (TokenEndLine _) ) = Reduce [red_4]
action 27 ( HappyTok (TokenAssignment _) ) = Shift 37 []
action 28 ( HappyTok (TokenImport _) ) = Shift 6 []
action 28 ( HappyTok (TokenPrint _) ) = Shift 7 []
action 28 ( HappyTok (TokenAsc _) ) = Shift 8 []
action 28 ( HappyTok (TokenDesc _) ) = Shift 9 []
action 28 ( HappyTok (TokenSelect _) ) = Shift 10 []
action 28 ( HappyTok (TokenReform _) ) = Shift 11 []
action 28 ( HappyTok (TokenUpdate _) ) = Shift 12 []
action 28 ( HappyTok (TokenWrite _) ) = Shift 13 []
action 28 ( HappyTok (TokenIf _) ) = Shift 14 []
action 28 ( HappyTok (TokenVar _ _) ) = Shift 15 []
action 29 ( HappyTok (TokenImport _) ) = Shift 6 []
action 29 ( HappyTok (TokenPrint _) ) = Shift 7 []
action 29 ( HappyTok (TokenAsc _) ) = Shift 8 []
action 29 ( HappyTok (TokenDesc _) ) = Shift 9 []
action 29 ( HappyTok (TokenSelect _) ) = Shift 10 []
action 29 ( HappyTok (TokenReform _) ) = Shift 11 []
action 29 ( HappyTok (TokenUpdate _) ) = Shift 12 []
action 29 ( HappyTok (TokenWrite _) ) = Shift 13 []
action 29 ( HappyTok (TokenIf _) ) = Shift 14 []
action 29 ( HappyTok (TokenVar _ _) ) = Shift 15 []
action 30 ( HappyTok (TokenImport _) ) = Shift 6 []
action 30 ( HappyTok (TokenPrint _) ) = Shift 7 []
action 30 ( HappyTok (TokenAsc _) ) = Shift 8 []
action 30 ( HappyTok (TokenDesc _) ) = Shift 9 []
action 30 ( HappyTok (TokenSelect _) ) = Shift 10 []
action 30 ( HappyTok (TokenReform _) ) = Shift 11 []
action 30 ( HappyTok (TokenUpdate _) ) = Shift 12 []
action 30 ( HappyTok (TokenWrite _) ) = Shift 13 []
action 30 ( HappyTok (TokenIf _) ) = Shift 14 []
action 30 ( HappyTok (TokenVar _ _) ) = Shift 15 []
action 31 ( HappyTok (TokenImport _) ) = Shift 6 []
action 31 ( HappyTok (TokenPrint _) ) = Shift 7 []
action 31 ( HappyTok (TokenAsc _) ) = Shift 8 []
action 31 ( HappyTok (TokenDesc _) ) = Shift 9 []
action 31 ( HappyTok (TokenSelect _) ) = Shift 10 []
action 31 ( HappyTok (TokenReform _) ) = Shift 11 []
action 31 ( HappyTok (TokenUpdate _) ) = Shift 12 []
action 31 ( HappyTok (TokenWrite _) ) = Shift 13 []
action 31 ( HappyTok (TokenIf _) ) = Shift 14 []
action 31 ( HappyTok (TokenVar _ _) ) = Shift 15 []
action 33 ( HappyTok (TokenRParen _) ) = Reduce [red_7]
action 33 ( HappyTok (TokenRSquare _) ) = Reduce [red_7]
action 33 ( HappyTok (TokenAdd _) ) = Reduce [red_7]
action 33 ( HappyTok (TokenSubs _) ) = Reduce [red_7]
action 33 ( HappyTok (TokenDiv _) ) = Reduce [red_7]
action 33 ( HappyTok (TokenMul _) ) = Reduce [red_7]
action 33 ( HappyTok (TokenMod _) ) = Reduce [red_7]
action 33 ( HappyTok (TokenAnd _) ) = Reduce [red_7]
action 33 ( HappyTok (TokenOr _) ) = Reduce [red_7]
action 33 ( HappyTok (TokenEndLine _) ) = Reduce [red_7]
action 33 ( HappyTok (TokenNotEq _) ) = Reduce [red_7]
action 33 ( HappyTok (TokenEq _) ) = Reduce [red_7]
action 33 ( HappyTok (TokenLessEq _) ) = Reduce [red_7]
action 33 ( HappyTok (TokenMoreEq _) ) = Reduce [red_7]
action 33 ( HappyTok (TokenLess _) ) = Reduce [red_7]
action 33 ( HappyTok (TokenMore _) ) = Reduce [red_7]
action 34 ( HappyTok (TokenCross _) ) = Shift 28 []
action 34 ( HappyTok (TokenUnion _) ) = Reduce [red_20]
action 34 ( HappyTok (TokenDiff _) ) = Reduce [red_20]
action 34 ( HappyTok (TokenRParen _) ) = Reduce [red_20]
action 34 ( HappyTok (TokenRSquare _) ) = Reduce [red_20]
action 34 ( HappyTok (TokenAdd _) ) = Reduce [red_20]
action 34 ( HappyTok (TokenSubs _) ) = Reduce [red_20]
action 34 ( HappyTok (TokenDiv _) ) = Reduce [red_20]
action 34 ( HappyTok (TokenMul _) ) = Reduce [red_20]
action 34 ( HappyTok (TokenMod _) ) = Reduce [red_20]
action 34 ( HappyTok (TokenAnd _) ) = Reduce [red_20]
action 34 ( HappyTok (TokenOr _) ) = Reduce [red_20]
action 34 ( HappyTok (TokenPipe _) ) = Reduce [red_20]
action 34 ( HappyTok (TokenEndLine _) ) = Reduce [red_20]
action 34 ( HappyTok (TokenNotEq _) ) = Reduce [red_20]
action 34 ( HappyTok (TokenEq _) ) = Reduce [red_20]
action 34 ( HappyTok (TokenLessEq _) ) = Reduce [red_20]
action 34 ( HappyTok (TokenMoreEq _) ) = Reduce [red_20]
action 34 ( HappyTok (TokenLess _) ) = Reduce [red_20]
action 34 ( HappyTok (TokenMore _) ) = Reduce [red_20]
action 35 ( HappyTok (TokenCross _) ) = Shift 28 []
action 35 ( HappyTok (TokenUnion _) ) = Reduce [red_19]
action 35 ( HappyTok (TokenDiff _) ) = Reduce [red_19]
action 35 ( HappyTok (TokenRParen _) ) = Reduce [red_19]
action 35 ( HappyTok (TokenRSquare _) ) = Reduce [red_19]
action 35 ( HappyTok (TokenAdd _) ) = Reduce [red_19]
action 35 ( HappyTok (TokenSubs _) ) = Reduce [red_19]
action 35 ( HappyTok (TokenDiv _) ) = Reduce [red_19]
action 35 ( HappyTok (TokenMul _) ) = Reduce [red_19]
action 35 ( HappyTok (TokenMod _) ) = Reduce [red_19]
action 35 ( HappyTok (TokenAnd _) ) = Reduce [red_19]
action 35 ( HappyTok (TokenOr _) ) = Reduce [red_19]
action 35 ( HappyTok (TokenPipe _) ) = Reduce [red_19]
action 35 ( HappyTok (TokenEndLine _) ) = Reduce [red_19]
action 35 ( HappyTok (TokenNotEq _) ) = Reduce [red_19]
action 35 ( HappyTok (TokenEq _) ) = Reduce [red_19]
action 35 ( HappyTok (TokenLessEq _) ) = Reduce [red_19]
action 35 ( HappyTok (TokenMoreEq _) ) = Reduce [red_19]
action 35 ( HappyTok (TokenLess _) ) = Reduce [red_19]
action 35 ( HappyTok (TokenMore _) ) = Reduce [red_19]
action 36 ( HappyTok (TokenCross _) ) = Shift 28 []
action 36 ( HappyTok (TokenUnion _) ) = Reduce [red_18]
action 36 ( HappyTok (TokenDiff _) ) = Reduce [red_18]
action 36 ( HappyTok (TokenRParen _) ) = Reduce [red_18]
action 36 ( HappyTok (TokenRSquare _) ) = Reduce [red_18]
action 36 ( HappyTok (TokenAdd _) ) = Reduce [red_18]
action 36 ( HappyTok (TokenSubs _) ) = Reduce [red_18]
action 36 ( HappyTok (TokenDiv _) ) = Reduce [red_18]
action 36 ( HappyTok (TokenMul _) ) = Reduce [red_18]
action 36 ( HappyTok (TokenMod _) ) = Reduce [red_18]
action 36 ( HappyTok (TokenAnd _) ) = Reduce [red_18]
action 36 ( HappyTok (TokenOr _) ) = Reduce [red_18]
action 36 ( HappyTok (TokenPipe _) ) = Reduce [red_18]
action 36 ( HappyTok (TokenEndLine _) ) = Reduce [red_18]
action 36 ( HappyTok (TokenNotEq _) ) = Reduce [red_18]
action 36 ( HappyTok (TokenEq _) ) = Reduce [red_18]
action 36 ( HappyTok (TokenLessEq _) ) = Reduce [red_18]
action 36 ( HappyTok (TokenMoreEq _) ) = Reduce [red_18]
action 36 ( HappyTok (TokenLess _) ) = Reduce [red_18]
action 36 ( HappyTok (TokenMore _) ) = Reduce [red_18]
action 37 ( HappyTok (TokenImport _) ) = Shift 6 []
action 37 ( HappyTok (TokenPrint _) ) = Shift 7 []
action 37 ( HappyTok (TokenAsc _) ) = Shift 8 []
action 37 ( HappyTok (TokenDesc _) ) = Shift 9 []
action 37 ( HappyTok (TokenSelect _) ) = Shift 10 []
action 37 ( HappyTok (TokenReform _) ) = Shift 11 []
action 37 ( HappyTok (TokenUpdate _) ) = Shift 12 []
action 37 ( HappyTok (TokenWrite _) ) = Shift 13 []
action 37 ( HappyTok (TokenIf _) ) = Shift 14 []
action 37 ( HappyTok (TokenVar _ _) ) = Shift 15 []
action 38 ( HappyTok (TokenNotEq _) ) = Shift 70 []
action 38 ( HappyTok (TokenEq _) ) = Shift 71 []
action 38 ( HappyTok (TokenLessEq _) ) = Shift 72 []
action 38 ( HappyTok (TokenMoreEq _) ) = Shift 73 []
action 38 ( HappyTok (TokenLess _) ) = Shift 74 []
action 38 ( HappyTok (TokenMore _) ) = Shift 75 []
action 39 ( HappyTok (TokenRSquare _) ) = Shift 76 []
action 39 ( HappyTok (TokenAnd _) ) = Shift 55 []
action 39 ( HappyTok (TokenOr _) ) = Shift 56 []
action 40 ( HappyTok (TokenRParen _) ) = Reduce [red_25]
action 40 ( HappyTok (TokenRSquare _) ) = Reduce [red_25]
action 40 ( HappyTok (TokenAnd _) ) = Reduce [red_25]
action 40 ( HappyTok (TokenOr _) ) = Reduce [red_25]
action 41 ( HappyTok (TokenAdd _) ) = Shift 65 []
action 41 ( HappyTok (TokenSubs _) ) = Shift 66 []
action 41 ( HappyTok (TokenDiv _) ) = Shift 67 []
action 41 ( HappyTok (TokenMul _) ) = Shift 68 []
action 41 ( HappyTok (TokenMod _) ) = Shift 69 []
action 41 ( HappyTok (TokenNotEq _) ) = Shift 70 []
action 41 ( HappyTok (TokenEq _) ) = Shift 71 []
action 41 ( HappyTok (TokenLessEq _) ) = Shift 72 []
action 41 ( HappyTok (TokenMoreEq _) ) = Shift 73 []
action 41 ( HappyTok (TokenLess _) ) = Shift 74 []
action 41 ( HappyTok (TokenMore _) ) = Shift 75 []
action 42 ( HappyTok (TokenImport _) ) = Shift 6 []
action 42 ( HappyTok (TokenPrint _) ) = Shift 7 []
action 42 ( HappyTok (TokenAsc _) ) = Shift 8 []
action 42 ( HappyTok (TokenDesc _) ) = Shift 9 []
action 42 ( HappyTok (TokenSelect _) ) = Shift 10 []
action 42 ( HappyTok (TokenReform _) ) = Shift 11 []
action 42 ( HappyTok (TokenUpdate _) ) = Shift 12 []
action 42 ( HappyTok (TokenWrite _) ) = Shift 13 []
action 42 ( HappyTok (TokenIf _) ) = Shift 14 []
action 42 ( HappyTok (TokenVar _ _) ) = Shift 15 []
action 43 ( HappyTok (TokenRParen _) ) = Reduce [red_35]
action 43 ( HappyTok (TokenRSquare _) ) = Reduce [red_35]
action 43 ( HappyTok (TokenAdd _) ) = Reduce [red_35]
action 43 ( HappyTok (TokenSubs _) ) = Reduce [red_35]
action 43 ( HappyTok (TokenDiv _) ) = Reduce [red_35]
action 43 ( HappyTok (TokenMul _) ) = Reduce [red_35]
action 43 ( HappyTok (TokenMod _) ) = Reduce [red_35]
action 43 ( HappyTok (TokenAnd _) ) = Reduce [red_35]
action 43 ( HappyTok (TokenOr _) ) = Reduce [red_35]
action 43 ( HappyTok (TokenNotEq _) ) = Reduce [red_35]
action 43 ( HappyTok (TokenEq _) ) = Reduce [red_35]
action 43 ( HappyTok (TokenLessEq _) ) = Reduce [red_35]
action 43 ( HappyTok (TokenMoreEq _) ) = Reduce [red_35]
action 43 ( HappyTok (TokenLess _) ) = Reduce [red_35]
action 43 ( HappyTok (TokenMore _) ) = Reduce [red_35]
action 44 ( HappyTok (TokenArity _) ) = Shift 42 []
action 44 ( HappyTok (TokenDollar _) ) = Shift 22 []
action 44 ( HappyTok (TokenInt _ _) ) = Shift 43 []
action 44 ( HappyTok (TokenLParen _) ) = Shift 44 []
action 44 ( HappyTok (TokenNeg _) ) = Shift 45 []
action 44 ( HappyTok (TokenTrue _) ) = Shift 46 []
action 44 ( HappyTok (TokenFalse _) ) = Shift 47 []
action 44 ( HappyTok (TokenString _ _) ) = Shift 23 []
action 45 ( HappyTok (TokenArity _) ) = Shift 42 []
action 45 ( HappyTok (TokenDollar _) ) = Shift 22 []
action 45 ( HappyTok (TokenInt _ _) ) = Shift 43 []
action 45 ( HappyTok (TokenLParen _) ) = Shift 44 []
action 45 ( HappyTok (TokenNeg _) ) = Shift 45 []
action 45 ( HappyTok (TokenTrue _) ) = Shift 46 []
action 45 ( HappyTok (TokenFalse _) ) = Shift 47 []
action 45 ( HappyTok (TokenString _ _) ) = Shift 23 []
action 46 ( HappyTok (TokenRParen _) ) = Reduce [red_32]
action 46 ( HappyTok (TokenRSquare _) ) = Reduce [red_32]
action 46 ( HappyTok (TokenAnd _) ) = Reduce [red_32]
action 46 ( HappyTok (TokenOr _) ) = Reduce [red_32]
action 47 ( HappyTok (TokenRParen _) ) = Reduce [red_33]
action 47 ( HappyTok (TokenRSquare _) ) = Reduce [red_33]
action 47 ( HappyTok (TokenAnd _) ) = Reduce [red_33]
action 47 ( HappyTok (TokenOr _) ) = Reduce [red_33]
action 48 ( HappyTok (TokenRSquare _) ) = Shift 58 []
action 49 ( HappyTok (TokenRSquare _) ) = Reduce [red_21]
action 49 ( HappyTok (TokenComma _) ) = Shift 57 []
action 50 ( HappyTok (TokenDollar _) ) = Reduce [red_23]
action 50 ( HappyTok (TokenCross _) ) = Reduce [red_23]
action 50 ( HappyTok (TokenUnion _) ) = Reduce [red_23]
action 50 ( HappyTok (TokenDiff _) ) = Reduce [red_23]
action 50 ( HappyTok (TokenRParen _) ) = Reduce [red_23]
action 50 ( HappyTok (TokenRSquare _) ) = Reduce [red_23]
action 50 ( HappyTok (TokenAdd _) ) = Reduce [red_23]
action 50 ( HappyTok (TokenSubs _) ) = Reduce [red_23]
action 50 ( HappyTok (TokenDiv _) ) = Reduce [red_23]
action 50 ( HappyTok (TokenMul _) ) = Reduce [red_23]
action 50 ( HappyTok (TokenMod _) ) = Reduce [red_23]
action 50 ( HappyTok (TokenAnd _) ) = Reduce [red_23]
action 50 ( HappyTok (TokenOr _) ) = Reduce [red_23]
action 50 ( HappyTok (TokenComma _) ) = Reduce [red_23]
action 50 ( HappyTok (TokenPipe _) ) = Reduce [red_23]
action 50 ( HappyTok (TokenEndLine _) ) = Reduce [red_23]
action 50 ( HappyTok (TokenNotEq _) ) = Reduce [red_23]
action 50 ( HappyTok (TokenEq _) ) = Reduce [red_23]
action 50 ( HappyTok (TokenLessEq _) ) = Reduce [red_23]
action 50 ( HappyTok (TokenMoreEq _) ) = Reduce [red_23]
action 50 ( HappyTok (TokenLess _) ) = Reduce [red_23]
action 50 ( HappyTok (TokenMore _) ) = Reduce [red_23]
action 50 ( HappyTok (TokenString _ _) ) = Reduce [red_23]
action 51 ( HappyTok (TokenCross _) ) = Reduce [red_14]
action 51 ( HappyTok (TokenUnion _) ) = Reduce [red_14]
action 51 ( HappyTok (TokenDiff _) ) = Reduce [red_14]
action 51 ( HappyTok (TokenRParen _) ) = Reduce [red_14]
action 51 ( HappyTok (TokenRSquare _) ) = Reduce [red_14]
action 51 ( HappyTok (TokenAdd _) ) = Reduce [red_14]
action 51 ( HappyTok (TokenSubs _) ) = Reduce [red_14]
action 51 ( HappyTok (TokenDiv _) ) = Reduce [red_14]
action 51 ( HappyTok (TokenMul _) ) = Reduce [red_14]
action 51 ( HappyTok (TokenMod _) ) = Reduce [red_14]
action 51 ( HappyTok (TokenAnd _) ) = Reduce [red_14]
action 51 ( HappyTok (TokenOr _) ) = Reduce [red_14]
action 51 ( HappyTok (TokenPipe _) ) = Reduce [red_14]
action 51 ( HappyTok (TokenEndLine _) ) = Reduce [red_14]
action 51 ( HappyTok (TokenNotEq _) ) = Reduce [red_14]
action 51 ( HappyTok (TokenEq _) ) = Reduce [red_14]
action 51 ( HappyTok (TokenLessEq _) ) = Reduce [red_14]
action 51 ( HappyTok (TokenMoreEq _) ) = Reduce [red_14]
action 51 ( HappyTok (TokenLess _) ) = Reduce [red_14]
action 51 ( HappyTok (TokenMore _) ) = Reduce [red_14]
action 52 ( HappyTok (TokenRSquare _) ) = Shift 54 []
action 52 ( HappyTok (TokenAnd _) ) = Shift 55 []
action 52 ( HappyTok (TokenOr _) ) = Shift 56 []
action 53 ( HappyEOF ) = Reduce [red_2]
action 54 ( HappyTok (TokenThen _) ) = Shift 88 []
action 55 ( HappyTok (TokenArity _) ) = Shift 42 []
action 55 ( HappyTok (TokenDollar _) ) = Shift 22 []
action 55 ( HappyTok (TokenInt _ _) ) = Shift 43 []
action 55 ( HappyTok (TokenLParen _) ) = Shift 44 []
action 55 ( HappyTok (TokenNeg _) ) = Shift 45 []
action 55 ( HappyTok (TokenTrue _) ) = Shift 46 []
action 55 ( HappyTok (TokenFalse _) ) = Shift 47 []
action 55 ( HappyTok (TokenString _ _) ) = Shift 23 []
action 56 ( HappyTok (TokenArity _) ) = Shift 42 []
action 56 ( HappyTok (TokenDollar _) ) = Shift 22 []
action 56 ( HappyTok (TokenInt _ _) ) = Shift 43 []
action 56 ( HappyTok (TokenLParen _) ) = Shift 44 []
action 56 ( HappyTok (TokenNeg _) ) = Shift 45 []
action 56 ( HappyTok (TokenTrue _) ) = Shift 46 []
action 56 ( HappyTok (TokenFalse _) ) = Shift 47 []
action 56 ( HappyTok (TokenString _ _) ) = Shift 23 []
action 57 ( HappyTok (TokenDollar _) ) = Shift 22 []
action 57 ( HappyTok (TokenString _ _) ) = Shift 23 []
action 58 ( HappyTok (TokenCross _) ) = Reduce [red_11]
action 58 ( HappyTok (TokenUnion _) ) = Reduce [red_11]
action 58 ( HappyTok (TokenDiff _) ) = Reduce [red_11]
action 58 ( HappyTok (TokenRParen _) ) = Reduce [red_11]
action 58 ( HappyTok (TokenRSquare _) ) = Reduce [red_11]
action 58 ( HappyTok (TokenAdd _) ) = Reduce [red_11]
action 58 ( HappyTok (TokenSubs _) ) = Reduce [red_11]
action 58 ( HappyTok (TokenDiv _) ) = Reduce [red_11]
action 58 ( HappyTok (TokenMul _) ) = Reduce [red_11]
action 58 ( HappyTok (TokenMod _) ) = Reduce [red_11]
action 58 ( HappyTok (TokenAnd _) ) = Reduce [red_11]
action 58 ( HappyTok (TokenOr _) ) = Reduce [red_11]
action 58 ( HappyTok (TokenPipe _) ) = Reduce [red_11]
action 58 ( HappyTok (TokenEndLine _) ) = Reduce [red_11]
action 58 ( HappyTok (TokenNotEq _) ) = Reduce [red_11]
action 58 ( HappyTok (TokenEq _) ) = Reduce [red_11]
action 58 ( HappyTok (TokenLessEq _) ) = Reduce [red_11]
action 58 ( HappyTok (TokenMoreEq _) ) = Reduce [red_11]
action 58 ( HappyTok (TokenLess _) ) = Reduce [red_11]
action 58 ( HappyTok (TokenMore _) ) = Reduce [red_11]
action 59 ( HappyTok (TokenRParen _) ) = Reduce [red_26]
action 59 ( HappyTok (TokenRSquare _) ) = Reduce [red_26]
action 59 ( HappyTok (TokenAnd _) ) = Reduce [red_26]
action 59 ( HappyTok (TokenOr _) ) = Reduce [red_26]
action 60 ( HappyTok (TokenRParen _) ) = Shift 84 []
action 60 ( HappyTok (TokenAnd _) ) = Shift 55 []
action 60 ( HappyTok (TokenOr _) ) = Shift 56 []
action 61 ( HappyTok (TokenRParen _) ) = Shift 83 []
action 61 ( HappyTok (TokenAdd _) ) = Shift 65 []
action 61 ( HappyTok (TokenSubs _) ) = Shift 66 []
action 61 ( HappyTok (TokenDiv _) ) = Shift 67 []
action 61 ( HappyTok (TokenMul _) ) = Shift 68 []
action 61 ( HappyTok (TokenMod _) ) = Shift 69 []
action 61 ( HappyTok (TokenNotEq _) ) = Shift 70 []
action 61 ( HappyTok (TokenEq _) ) = Shift 71 []
action 61 ( HappyTok (TokenLessEq _) ) = Shift 72 []
action 61 ( HappyTok (TokenMoreEq _) ) = Shift 73 []
action 61 ( HappyTok (TokenLess _) ) = Shift 74 []
action 61 ( HappyTok (TokenMore _) ) = Shift 75 []
action 62 ( HappyTok (TokenRParen _) ) = Reduce [red_34]
action 62 ( HappyTok (TokenRSquare _) ) = Reduce [red_34]
action 62 ( HappyTok (TokenAdd _) ) = Reduce [red_34]
action 62 ( HappyTok (TokenSubs _) ) = Reduce [red_34]
action 62 ( HappyTok (TokenDiv _) ) = Reduce [red_34]
action 62 ( HappyTok (TokenMul _) ) = Reduce [red_34]
action 62 ( HappyTok (TokenMod _) ) = Reduce [red_34]
action 62 ( HappyTok (TokenAnd _) ) = Reduce [red_34]
action 62 ( HappyTok (TokenOr _) ) = Reduce [red_34]
action 62 ( HappyTok (TokenNotEq _) ) = Reduce [red_34]
action 62 ( HappyTok (TokenEq _) ) = Reduce [red_34]
action 62 ( HappyTok (TokenLessEq _) ) = Reduce [red_34]
action 62 ( HappyTok (TokenMoreEq _) ) = Reduce [red_34]
action 62 ( HappyTok (TokenLess _) ) = Reduce [red_34]
action 62 ( HappyTok (TokenMore _) ) = Reduce [red_34]
action 63 ( HappyTok (TokenArity _) ) = Shift 42 []
action 63 ( HappyTok (TokenInt _ _) ) = Shift 43 []
action 63 ( HappyTok (TokenLParen _) ) = Shift 81 []
action 64 ( HappyTok (TokenArity _) ) = Shift 42 []
action 64 ( HappyTok (TokenInt _ _) ) = Shift 43 []
action 64 ( HappyTok (TokenLParen _) ) = Shift 81 []
action 65 ( HappyTok (TokenArity _) ) = Reduce [red_38]
action 65 ( HappyTok (TokenInt _ _) ) = Reduce [red_38]
action 65 ( HappyTok (TokenLParen _) ) = Reduce [red_38]
action 66 ( HappyTok (TokenArity _) ) = Reduce [red_39]
action 66 ( HappyTok (TokenInt _ _) ) = Reduce [red_39]
action 66 ( HappyTok (TokenLParen _) ) = Reduce [red_39]
action 67 ( HappyTok (TokenArity _) ) = Reduce [red_40]
action 67 ( HappyTok (TokenInt _ _) ) = Reduce [red_40]
action 67 ( HappyTok (TokenLParen _) ) = Reduce [red_40]
action 68 ( HappyTok (TokenArity _) ) = Reduce [red_41]
action 68 ( HappyTok (TokenInt _ _) ) = Reduce [red_41]
action 68 ( HappyTok (TokenLParen _) ) = Reduce [red_41]
action 69 ( HappyTok (TokenArity _) ) = Reduce [red_42]
action 69 ( HappyTok (TokenInt _ _) ) = Reduce [red_42]
action 69 ( HappyTok (TokenLParen _) ) = Reduce [red_42]
action 70 ( HappyTok (TokenArity _) ) = Reduce [red_44]
action 70 ( HappyTok (TokenDollar _) ) = Reduce [red_44]
action 70 ( HappyTok (TokenInt _ _) ) = Reduce [red_44]
action 70 ( HappyTok (TokenLParen _) ) = Reduce [red_44]
action 70 ( HappyTok (TokenString _ _) ) = Reduce [red_44]
action 71 ( HappyTok (TokenArity _) ) = Reduce [red_43]
action 71 ( HappyTok (TokenDollar _) ) = Reduce [red_43]
action 71 ( HappyTok (TokenInt _ _) ) = Reduce [red_43]
action 71 ( HappyTok (TokenLParen _) ) = Reduce [red_43]
action 71 ( HappyTok (TokenString _ _) ) = Reduce [red_43]
action 72 ( HappyTok (TokenArity _) ) = Reduce [red_47]
action 72 ( HappyTok (TokenDollar _) ) = Reduce [red_47]
action 72 ( HappyTok (TokenInt _ _) ) = Reduce [red_47]
action 72 ( HappyTok (TokenLParen _) ) = Reduce [red_47]
action 72 ( HappyTok (TokenString _ _) ) = Reduce [red_47]
action 73 ( HappyTok (TokenArity _) ) = Reduce [red_48]
action 73 ( HappyTok (TokenDollar _) ) = Reduce [red_48]
action 73 ( HappyTok (TokenInt _ _) ) = Reduce [red_48]
action 73 ( HappyTok (TokenLParen _) ) = Reduce [red_48]
action 73 ( HappyTok (TokenString _ _) ) = Reduce [red_48]
action 74 ( HappyTok (TokenArity _) ) = Reduce [red_45]
action 74 ( HappyTok (TokenDollar _) ) = Reduce [red_45]
action 74 ( HappyTok (TokenInt _ _) ) = Reduce [red_45]
action 74 ( HappyTok (TokenLParen _) ) = Reduce [red_45]
action 74 ( HappyTok (TokenString _ _) ) = Reduce [red_45]
action 75 ( HappyTok (TokenArity _) ) = Reduce [red_46]
action 75 ( HappyTok (TokenDollar _) ) = Reduce [red_46]
action 75 ( HappyTok (TokenInt _ _) ) = Reduce [red_46]
action 75 ( HappyTok (TokenLParen _) ) = Reduce [red_46]
action 75 ( HappyTok (TokenString _ _) ) = Reduce [red_46]
action 76 ( HappyTok (TokenCross _) ) = Reduce [red_13]
action 76 ( HappyTok (TokenUnion _) ) = Reduce [red_13]
action 76 ( HappyTok (TokenDiff _) ) = Reduce [red_13]
action 76 ( HappyTok (TokenRParen _) ) = Reduce [red_13]
action 76 ( HappyTok (TokenRSquare _) ) = Reduce [red_13]
action 76 ( HappyTok (TokenAdd _) ) = Reduce [red_13]
action 76 ( HappyTok (TokenSubs _) ) = Reduce [red_13]
action 76 ( HappyTok (TokenDiv _) ) = Reduce [red_13]
action 76 ( HappyTok (TokenMul _) ) = Reduce [red_13]
action 76 ( HappyTok (TokenMod _) ) = Reduce [red_13]
action 76 ( HappyTok (TokenAnd _) ) = Reduce [red_13]
action 76 ( HappyTok (TokenOr _) ) = Reduce [red_13]
action 76 ( HappyTok (TokenPipe _) ) = Reduce [red_13]
action 76 ( HappyTok (TokenEndLine _) ) = Reduce [red_13]
action 76 ( HappyTok (TokenNotEq _) ) = Reduce [red_13]
action 76 ( HappyTok (TokenEq _) ) = Reduce [red_13]
action 76 ( HappyTok (TokenLessEq _) ) = Reduce [red_13]
action 76 ( HappyTok (TokenMoreEq _) ) = Reduce [red_13]
action 76 ( HappyTok (TokenLess _) ) = Reduce [red_13]
action 76 ( HappyTok (TokenMore _) ) = Reduce [red_13]
action 77 ( HappyTok (TokenDollar _) ) = Shift 22 []
action 77 ( HappyTok (TokenString _ _) ) = Shift 23 []
action 78 ( HappyTok (TokenEndLine _) ) = Reduce [red_3]
action 79 ( HappyTok (TokenRParen _) ) = Reduce [red_30]
action 79 ( HappyTok (TokenRSquare _) ) = Reduce [red_30]
action 79 ( HappyTok (TokenAnd _) ) = Reduce [red_30]
action 79 ( HappyTok (TokenOr _) ) = Reduce [red_30]
action 80 ( HappyTok (TokenRParen _) ) = Reduce [red_31]
action 80 ( HappyTok (TokenRSquare _) ) = Reduce [red_31]
action 80 ( HappyTok (TokenAdd _) ) = Shift 65 []
action 80 ( HappyTok (TokenSubs _) ) = Shift 66 []
action 80 ( HappyTok (TokenDiv _) ) = Shift 67 []
action 80 ( HappyTok (TokenMul _) ) = Shift 68 []
action 80 ( HappyTok (TokenMod _) ) = Shift 69 []
action 80 ( HappyTok (TokenAnd _) ) = Reduce [red_31]
action 80 ( HappyTok (TokenOr _) ) = Reduce [red_31]
action 81 ( HappyTok (TokenArity _) ) = Shift 42 []
action 81 ( HappyTok (TokenInt _ _) ) = Shift 43 []
action 81 ( HappyTok (TokenLParen _) ) = Shift 81 []
action 82 ( HappyTok (TokenRParen _) ) = Reduce [red_36]
action 82 ( HappyTok (TokenRSquare _) ) = Reduce [red_36]
action 82 ( HappyTok (TokenAdd _) ) = Shift 65 [red_36]
action 82 ( HappyTok (TokenSubs _) ) = Shift 66 [red_36]
action 82 ( HappyTok (TokenDiv _) ) = Shift 67 [red_36]
action 82 ( HappyTok (TokenMul _) ) = Shift 68 [red_36]
action 82 ( HappyTok (TokenMod _) ) = Shift 69 [red_36]
action 82 ( HappyTok (TokenAnd _) ) = Reduce [red_36]
action 82 ( HappyTok (TokenOr _) ) = Reduce [red_36]
action 82 ( HappyTok (TokenNotEq _) ) = Reduce [red_36]
action 82 ( HappyTok (TokenEq _) ) = Reduce [red_36]
action 82 ( HappyTok (TokenLessEq _) ) = Reduce [red_36]
action 82 ( HappyTok (TokenMoreEq _) ) = Reduce [red_36]
action 82 ( HappyTok (TokenLess _) ) = Reduce [red_36]
action 82 ( HappyTok (TokenMore _) ) = Reduce [red_36]
action 83 ( HappyTok (TokenRParen _) ) = Reduce [red_37]
action 83 ( HappyTok (TokenRSquare _) ) = Reduce [red_37]
action 83 ( HappyTok (TokenAdd _) ) = Reduce [red_37]
action 83 ( HappyTok (TokenSubs _) ) = Reduce [red_37]
action 83 ( HappyTok (TokenDiv _) ) = Reduce [red_37]
action 83 ( HappyTok (TokenMul _) ) = Reduce [red_37]
action 83 ( HappyTok (TokenMod _) ) = Reduce [red_37]
action 83 ( HappyTok (TokenAnd _) ) = Reduce [red_37]
action 83 ( HappyTok (TokenOr _) ) = Reduce [red_37]
action 83 ( HappyTok (TokenNotEq _) ) = Reduce [red_37]
action 83 ( HappyTok (TokenEq _) ) = Reduce [red_37]
action 83 ( HappyTok (TokenLessEq _) ) = Reduce [red_37]
action 83 ( HappyTok (TokenMoreEq _) ) = Reduce [red_37]
action 83 ( HappyTok (TokenLess _) ) = Reduce [red_37]
action 83 ( HappyTok (TokenMore _) ) = Reduce [red_37]
action 84 ( HappyTok (TokenRParen _) ) = Reduce [red_29]
action 84 ( HappyTok (TokenRSquare _) ) = Reduce [red_29]
action 84 ( HappyTok (TokenAnd _) ) = Reduce [red_29]
action 84 ( HappyTok (TokenOr _) ) = Reduce [red_29]
action 85 ( HappyTok (TokenRSquare _) ) = Reduce [red_22]
action 86 ( HappyTok (TokenRParen _) ) = Reduce [red_28]
action 86 ( HappyTok (TokenRSquare _) ) = Reduce [red_28]
action 86 ( HappyTok (TokenAnd _) ) = Reduce [red_28]
action 86 ( HappyTok (TokenOr _) ) = Reduce [red_28]
action 87 ( HappyTok (TokenRParen _) ) = Reduce [red_27]
action 87 ( HappyTok (TokenRSquare _) ) = Reduce [red_27]
action 87 ( HappyTok (TokenAnd _) ) = Reduce [red_27]
action 87 ( HappyTok (TokenOr _) ) = Reduce [red_27]
action 88 ( HappyTok (TokenImport _) ) = Shift 6 []
action 88 ( HappyTok (TokenPrint _) ) = Shift 7 []
action 88 ( HappyTok (TokenAsc _) ) = Shift 8 []
action 88 ( HappyTok (TokenDesc _) ) = Shift 9 []
action 88 ( HappyTok (TokenSelect _) ) = Shift 10 []
action 88 ( HappyTok (TokenReform _) ) = Shift 11 []
action 88 ( HappyTok (TokenUpdate _) ) = Shift 12 []
action 88 ( HappyTok (TokenWrite _) ) = Shift 13 []
action 88 ( HappyTok (TokenIf _) ) = Shift 14 []
action 88 ( HappyTok (TokenVar _ _) ) = Shift 15 []
action 89 ( HappyTok (TokenEndLine _) ) = Shift 91 []
action 90 ( HappyTok (TokenRParen _) ) = Shift 83 []
action 90 ( HappyTok (TokenAdd _) ) = Shift 65 []
action 90 ( HappyTok (TokenSubs _) ) = Shift 66 []
action 90 ( HappyTok (TokenDiv _) ) = Shift 67 []
action 90 ( HappyTok (TokenMul _) ) = Shift 68 []
action 90 ( HappyTok (TokenMod _) ) = Shift 69 []
action 91 ( HappyTok (TokenCross _) ) = Reduce [red_17]
action 91 ( HappyTok (TokenUnion _) ) = Reduce [red_17]
action 91 ( HappyTok (TokenDiff _) ) = Reduce [red_17]
action 91 ( HappyTok (TokenRParen _) ) = Reduce [red_17]
action 91 ( HappyTok (TokenRSquare _) ) = Reduce [red_17]
action 91 ( HappyTok (TokenAdd _) ) = Reduce [red_17]
action 91 ( HappyTok (TokenSubs _) ) = Reduce [red_17]
action 91 ( HappyTok (TokenDiv _) ) = Reduce [red_17]
action 91 ( HappyTok (TokenMul _) ) = Reduce [red_17]
action 91 ( HappyTok (TokenMod _) ) = Reduce [red_17]
action 91 ( HappyTok (TokenAnd _) ) = Reduce [red_17]
action 91 ( HappyTok (TokenOr _) ) = Reduce [red_17]
action 91 ( HappyTok (TokenPipe _) ) = Reduce [red_17]
action 91 ( HappyTok (TokenEndLine _) ) = Reduce [red_17]
action 91 ( HappyTok (TokenNotEq _) ) = Reduce [red_17]
action 91 ( HappyTok (TokenEq _) ) = Reduce [red_17]
action 91 ( HappyTok (TokenLessEq _) ) = Reduce [red_17]
action 91 ( HappyTok (TokenMoreEq _) ) = Reduce [red_17]
action 91 ( HappyTok (TokenLess _) ) = Reduce [red_17]
action 91 ( HappyTok (TokenMore _) ) = Reduce [red_17]
action _ _ = Error
red_1 = (G_Prog,2 :: Int,semfn_0_0)
red_2 = (G_Prog,3 :: Int,semfn_1_0)
red_3 = (G_Expr,4 :: Int,semfn_2_0)
red_4 = (G_Expr,2 :: Int,semfn_3_0)
red_5 = (G_Expr,1 :: Int,semfn_0_1)
red_6 = (G_Query,1 :: Int,semfn_0_2)
red_7 = (G_Query,3 :: Int,semfn_1_1)
red_8 = (G_CsvExpr,2 :: Int,semfn_3_1)
red_9 = (G_CsvExpr,1 :: Int,semfn_4_0)
red_10 = (G_CsvExpr,1 :: Int,semfn_4_1)
red_11 = (G_CsvExpr,4 :: Int,semfn_5_0)
red_12 = (G_CsvExpr,1 :: Int,semfn_4_2)
red_13 = (G_CsvExpr,4 :: Int,semfn_5_1)
red_14 = (G_CsvExpr,3 :: Int,semfn_6_0)
red_15 = (G_CsvExpr,1 :: Int,semfn_0_3)
red_16 = (G_CsvExpr,2 :: Int,semfn_3_2)
red_17 = (G_CsvExpr,7 :: Int,semfn_7_0)
red_18 = (G_CsvExpr,3 :: Int,semfn_1_2)
red_19 = (G_CsvExpr,3 :: Int,semfn_1_3)
red_20 = (G_CsvExpr,3 :: Int,semfn_1_4)
red_21 = (G_Cols,1 :: Int,semfn_0_4)
red_22 = (G_Cols,3 :: Int,semfn_1_5)
red_23 = (G_Col,2 :: Int,semfn_3_3)
red_24 = (G_Col,1 :: Int,semfn_0_5)
red_25 = (G_Conds,1 :: Int,semfn_0_6)
red_26 = (G_Conds,2 :: Int,semfn_3_4)
red_27 = (G_Conds,3 :: Int,semfn_1_6)
red_28 = (G_Conds,3 :: Int,semfn_1_7)
red_29 = (G_Conds,3 :: Int,semfn_3_5)
red_30 = (G_Cond,3 :: Int,semfn_8_0)
red_31 = (G_Cond,3 :: Int,semfn_8_1)
red_32 = (G_Cond,1 :: Int,semfn_4_3)
red_33 = (G_Cond,1 :: Int,semfn_4_4)
red_34 = (G_MathExpr,2 :: Int,semfn_3_6)
red_35 = (G_MathExpr,1 :: Int,semfn_0_7)
red_36 = (G_MathExpr,3 :: Int,semfn_8_2)
red_37 = (G_MathExpr,3 :: Int,semfn_3_5)
red_38 = (G_MathOperation,1 :: Int,semfn_4_5)
red_39 = (G_MathOperation,1 :: Int,semfn_4_6)
red_40 = (G_MathOperation,1 :: Int,semfn_4_7)
red_41 = (G_MathOperation,1 :: Int,semfn_4_8)
red_42 = (G_MathOperation,1 :: Int,semfn_4_9)
red_43 = (G_Operation,1 :: Int,semfn_4_10)
red_44 = (G_Operation,1 :: Int,semfn_4_11)
red_45 = (G_Operation,1 :: Int,semfn_4_12)
red_46 = (G_Operation,1 :: Int,semfn_4_13)
red_47 = (G_Operation,1 :: Int,semfn_4_14)
red_48 = (G_Operation,1 :: Int,semfn_4_15)
goto 0 G_Prog = 16
goto 0 G_Expr = 17
goto 0 G_Query = 3
goto 0 G_CsvExpr = 4

goto 1 G_Expr = 2
goto 1 G_Query = 3
goto 1 G_CsvExpr = 4

goto 12 G_Col = 21

goto 18 G_Prog = 53
goto 18 G_Expr = 17
goto 18 G_Query = 3
goto 18 G_CsvExpr = 4

goto 19 G_Col = 38
goto 19 G_Conds = 52
goto 19 G_Cond = 40
goto 19 G_MathExpr = 41

goto 21 G_Col = 51

goto 24 G_Cols = 48
goto 24 G_Col = 49

goto 25 G_Col = 38
goto 25 G_Conds = 39
goto 25 G_Cond = 40
goto 25 G_MathExpr = 41

goto 28 G_CsvExpr = 36

goto 29 G_CsvExpr = 35

goto 30 G_CsvExpr = 34

goto 31 G_Query = 33
goto 31 G_CsvExpr = 4

goto 37 G_Query = 78
goto 37 G_CsvExpr = 4

goto 38 G_Operation = 77

goto 41 G_MathOperation = 63
goto 41 G_Operation = 64

goto 42 G_Query = 62
goto 42 G_CsvExpr = 4

goto 44 G_Col = 38
goto 44 G_Conds = 60
goto 44 G_Cond = 40
goto 44 G_MathExpr = 61

goto 45 G_Col = 38
goto 45 G_Conds = 59
goto 45 G_Cond = 40
goto 45 G_MathExpr = 41

goto 55 G_Col = 38
goto 55 G_Conds = 87
goto 55 G_Cond = 40
goto 55 G_MathExpr = 41

goto 56 G_Col = 38
goto 56 G_Conds = 86
goto 56 G_Cond = 40
goto 56 G_MathExpr = 41

goto 57 G_Cols = 85
goto 57 G_Col = 49

goto 61 G_MathOperation = 63
goto 61 G_Operation = 64

goto 63 G_MathExpr = 82

goto 64 G_MathExpr = 80

goto 77 G_Col = 79

goto 80 G_MathOperation = 63

goto 81 G_MathExpr = 90

goto 82 G_MathOperation = 63

goto 88 G_Query = 89
goto 88 G_CsvExpr = 4

goto 90 G_MathOperation = 63

goto _ _ = -1
